// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/25/2025 15:45:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ContadorPersonas
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ContadorPersonas_vlg_sample_tst(
	clk,
	entrar_persona,
	reset,
	salir_persona,
	sampler_tx
);
input  clk;
input  entrar_persona;
input  reset;
input  salir_persona;
output sampler_tx;

reg sample;
time current_time;
always @(clk or entrar_persona or reset or salir_persona)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ContadorPersonas_vlg_check_tst (
	luces,
	num_personas,
	sobrecarga,
	sampler_rx
);
input  luces;
input [3:0] num_personas;
input  sobrecarga;
input sampler_rx;

reg  luces_expected;
reg [3:0] num_personas_expected;
reg  sobrecarga_expected;

reg  luces_prev;
reg [3:0] num_personas_prev;
reg  sobrecarga_prev;

reg  luces_expected_prev;
reg [3:0] num_personas_expected_prev;
reg  sobrecarga_expected_prev;

reg  last_luces_exp;
reg [3:0] last_num_personas_exp;
reg  last_sobrecarga_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	luces_prev = luces;
	num_personas_prev = num_personas;
	sobrecarga_prev = sobrecarga;
end

// update expected /o prevs

always @(trigger)
begin
	luces_expected_prev = luces_expected;
	num_personas_expected_prev = num_personas_expected;
	sobrecarga_expected_prev = sobrecarga_expected;
end



// expected luces
initial
begin
	luces_expected = 1'bX;
end 
// expected num_personas[ 3 ]
initial
begin
	num_personas_expected[3] = 1'bX;
end 
// expected num_personas[ 2 ]
initial
begin
	num_personas_expected[2] = 1'bX;
end 
// expected num_personas[ 1 ]
initial
begin
	num_personas_expected[1] = 1'bX;
end 
// expected num_personas[ 0 ]
initial
begin
	num_personas_expected[0] = 1'bX;
end 

// expected sobrecarga
initial
begin
	sobrecarga_expected = 1'bX;
end 
// generate trigger
always @(luces_expected or luces or num_personas_expected or num_personas or sobrecarga_expected or sobrecarga)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected luces = %b | expected num_personas = %b | expected sobrecarga = %b | ",luces_expected_prev,num_personas_expected_prev,sobrecarga_expected_prev);
	$display("| real luces = %b | real num_personas = %b | real sobrecarga = %b | ",luces_prev,num_personas_prev,sobrecarga_prev);
`endif
	if (
		( luces_expected_prev !== 1'bx ) && ( luces_prev !== luces_expected_prev )
		&& ((luces_expected_prev !== last_luces_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port luces :: @time = %t",  $realtime);
		$display ("     Expected value = %b", luces_expected_prev);
		$display ("     Real value = %b", luces_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_luces_exp = luces_expected_prev;
	end
	if (
		( num_personas_expected_prev[0] !== 1'bx ) && ( num_personas_prev[0] !== num_personas_expected_prev[0] )
		&& ((num_personas_expected_prev[0] !== last_num_personas_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_personas[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_personas_expected_prev);
		$display ("     Real value = %b", num_personas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_num_personas_exp[0] = num_personas_expected_prev[0];
	end
	if (
		( num_personas_expected_prev[1] !== 1'bx ) && ( num_personas_prev[1] !== num_personas_expected_prev[1] )
		&& ((num_personas_expected_prev[1] !== last_num_personas_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_personas[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_personas_expected_prev);
		$display ("     Real value = %b", num_personas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_num_personas_exp[1] = num_personas_expected_prev[1];
	end
	if (
		( num_personas_expected_prev[2] !== 1'bx ) && ( num_personas_prev[2] !== num_personas_expected_prev[2] )
		&& ((num_personas_expected_prev[2] !== last_num_personas_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_personas[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_personas_expected_prev);
		$display ("     Real value = %b", num_personas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_num_personas_exp[2] = num_personas_expected_prev[2];
	end
	if (
		( num_personas_expected_prev[3] !== 1'bx ) && ( num_personas_prev[3] !== num_personas_expected_prev[3] )
		&& ((num_personas_expected_prev[3] !== last_num_personas_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_personas[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_personas_expected_prev);
		$display ("     Real value = %b", num_personas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_num_personas_exp[3] = num_personas_expected_prev[3];
	end
	if (
		( sobrecarga_expected_prev !== 1'bx ) && ( sobrecarga_prev !== sobrecarga_expected_prev )
		&& ((sobrecarga_expected_prev !== last_sobrecarga_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sobrecarga :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sobrecarga_expected_prev);
		$display ("     Real value = %b", sobrecarga_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sobrecarga_exp = sobrecarga_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ContadorPersonas_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg entrar_persona;
reg reset;
reg salir_persona;
// wires                                               
wire luces;
wire [3:0] num_personas;
wire sobrecarga;

wire sampler;                             

// assign statements (if any)                          
ContadorPersonas i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.entrar_persona(entrar_persona),
	.luces(luces),
	.num_personas(num_personas),
	.reset(reset),
	.salir_persona(salir_persona),
	.sobrecarga(sobrecarga)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// entrar_persona
initial
begin
	entrar_persona = 1'b0;
	entrar_persona = #10000 1'b1;
	entrar_persona = #40000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// salir_persona
initial
begin
	salir_persona = 1'b1;
end 

ContadorPersonas_vlg_sample_tst tb_sample (
	.clk(clk),
	.entrar_persona(entrar_persona),
	.reset(reset),
	.salir_persona(salir_persona),
	.sampler_tx(sampler)
);

ContadorPersonas_vlg_check_tst tb_out(
	.luces(luces),
	.num_personas(num_personas),
	.sobrecarga(sobrecarga),
	.sampler_rx(sampler)
);
endmodule


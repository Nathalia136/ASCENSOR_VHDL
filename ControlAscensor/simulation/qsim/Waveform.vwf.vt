// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/25/2025 18:56:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ControlAscensor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlAscensor_vlg_sample_tst(
	clk_1Hz,
	fallo_energia,
	notificacion,
	piso_actual,
	piso_destino,
	puerta,
	reset,
	sobrecarga,
	sampler_tx
);
input  clk_1Hz;
input  fallo_energia;
input  notificacion;
input [2:0] piso_actual;
input [2:0] piso_destino;
input  puerta;
input  reset;
input  sobrecarga;
output sampler_tx;

reg sample;
time current_time;
always @(clk_1Hz or fallo_energia or notificacion or piso_actual or piso_destino or puerta or reset or sobrecarga)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ControlAscensor_vlg_check_tst (
	clear_request,
	clear_request_bajar,
	clear_request_subir,
	llegada_piso,
	motor_bajar,
	motor_subir,
	sampler_rx
);
input [4:0] clear_request;
input [3:0] clear_request_bajar;
input [3:0] clear_request_subir;
input  llegada_piso;
input  motor_bajar;
input  motor_subir;
input sampler_rx;

reg [4:0] clear_request_expected;
reg [3:0] clear_request_bajar_expected;
reg [3:0] clear_request_subir_expected;
reg  llegada_piso_expected;
reg  motor_bajar_expected;
reg  motor_subir_expected;

reg [4:0] clear_request_prev;
reg [3:0] clear_request_bajar_prev;
reg [3:0] clear_request_subir_prev;
reg  llegada_piso_prev;
reg  motor_bajar_prev;
reg  motor_subir_prev;

reg [4:0] clear_request_expected_prev;
reg [3:0] clear_request_bajar_expected_prev;
reg [3:0] clear_request_subir_expected_prev;
reg  llegada_piso_expected_prev;
reg  motor_bajar_expected_prev;
reg  motor_subir_expected_prev;

reg [4:0] last_clear_request_exp;
reg [3:0] last_clear_request_bajar_exp;
reg [3:0] last_clear_request_subir_exp;
reg  last_llegada_piso_exp;
reg  last_motor_bajar_exp;
reg  last_motor_subir_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	clear_request_prev = clear_request;
	clear_request_bajar_prev = clear_request_bajar;
	clear_request_subir_prev = clear_request_subir;
	llegada_piso_prev = llegada_piso;
	motor_bajar_prev = motor_bajar;
	motor_subir_prev = motor_subir;
end

// update expected /o prevs

always @(trigger)
begin
	clear_request_expected_prev = clear_request_expected;
	clear_request_bajar_expected_prev = clear_request_bajar_expected;
	clear_request_subir_expected_prev = clear_request_subir_expected;
	llegada_piso_expected_prev = llegada_piso_expected;
	motor_bajar_expected_prev = motor_bajar_expected;
	motor_subir_expected_prev = motor_subir_expected;
end


// expected clear_request[ 4 ]
initial
begin
	clear_request_expected[4] = 1'bX;
end 
// expected clear_request[ 3 ]
initial
begin
	clear_request_expected[3] = 1'bX;
end 
// expected clear_request[ 2 ]
initial
begin
	clear_request_expected[2] = 1'bX;
end 
// expected clear_request[ 1 ]
initial
begin
	clear_request_expected[1] = 1'bX;
end 
// expected clear_request[ 0 ]
initial
begin
	clear_request_expected[0] = 1'bX;
end 
// expected clear_request_bajar[ 3 ]
initial
begin
	clear_request_bajar_expected[3] = 1'bX;
end 
// expected clear_request_bajar[ 2 ]
initial
begin
	clear_request_bajar_expected[2] = 1'bX;
end 
// expected clear_request_bajar[ 1 ]
initial
begin
	clear_request_bajar_expected[1] = 1'bX;
end 
// expected clear_request_bajar[ 0 ]
initial
begin
	clear_request_bajar_expected[0] = 1'bX;
end 
// expected clear_request_subir[ 3 ]
initial
begin
	clear_request_subir_expected[3] = 1'bX;
end 
// expected clear_request_subir[ 2 ]
initial
begin
	clear_request_subir_expected[2] = 1'bX;
end 
// expected clear_request_subir[ 1 ]
initial
begin
	clear_request_subir_expected[1] = 1'bX;
end 
// expected clear_request_subir[ 0 ]
initial
begin
	clear_request_subir_expected[0] = 1'bX;
end 

// expected llegada_piso
initial
begin
	llegada_piso_expected = 1'bX;
end 

// expected motor_bajar
initial
begin
	motor_bajar_expected = 1'bX;
end 

// expected motor_subir
initial
begin
	motor_subir_expected = 1'bX;
end 
// generate trigger
always @(clear_request_expected or clear_request or clear_request_bajar_expected or clear_request_bajar or clear_request_subir_expected or clear_request_subir or llegada_piso_expected or llegada_piso or motor_bajar_expected or motor_bajar or motor_subir_expected or motor_subir)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clear_request = %b | expected clear_request_bajar = %b | expected clear_request_subir = %b | expected llegada_piso = %b | expected motor_bajar = %b | expected motor_subir = %b | ",clear_request_expected_prev,clear_request_bajar_expected_prev,clear_request_subir_expected_prev,llegada_piso_expected_prev,motor_bajar_expected_prev,motor_subir_expected_prev);
	$display("| real clear_request = %b | real clear_request_bajar = %b | real clear_request_subir = %b | real llegada_piso = %b | real motor_bajar = %b | real motor_subir = %b | ",clear_request_prev,clear_request_bajar_prev,clear_request_subir_prev,llegada_piso_prev,motor_bajar_prev,motor_subir_prev);
`endif
	if (
		( clear_request_expected_prev[0] !== 1'bx ) && ( clear_request_prev[0] !== clear_request_expected_prev[0] )
		&& ((clear_request_expected_prev[0] !== last_clear_request_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_expected_prev);
		$display ("     Real value = %b", clear_request_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clear_request_exp[0] = clear_request_expected_prev[0];
	end
	if (
		( clear_request_expected_prev[1] !== 1'bx ) && ( clear_request_prev[1] !== clear_request_expected_prev[1] )
		&& ((clear_request_expected_prev[1] !== last_clear_request_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_expected_prev);
		$display ("     Real value = %b", clear_request_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clear_request_exp[1] = clear_request_expected_prev[1];
	end
	if (
		( clear_request_expected_prev[2] !== 1'bx ) && ( clear_request_prev[2] !== clear_request_expected_prev[2] )
		&& ((clear_request_expected_prev[2] !== last_clear_request_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_expected_prev);
		$display ("     Real value = %b", clear_request_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clear_request_exp[2] = clear_request_expected_prev[2];
	end
	if (
		( clear_request_expected_prev[3] !== 1'bx ) && ( clear_request_prev[3] !== clear_request_expected_prev[3] )
		&& ((clear_request_expected_prev[3] !== last_clear_request_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_expected_prev);
		$display ("     Real value = %b", clear_request_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clear_request_exp[3] = clear_request_expected_prev[3];
	end
	if (
		( clear_request_expected_prev[4] !== 1'bx ) && ( clear_request_prev[4] !== clear_request_expected_prev[4] )
		&& ((clear_request_expected_prev[4] !== last_clear_request_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_expected_prev);
		$display ("     Real value = %b", clear_request_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clear_request_exp[4] = clear_request_expected_prev[4];
	end
	if (
		( clear_request_bajar_expected_prev[0] !== 1'bx ) && ( clear_request_bajar_prev[0] !== clear_request_bajar_expected_prev[0] )
		&& ((clear_request_bajar_expected_prev[0] !== last_clear_request_bajar_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request_bajar[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_bajar_expected_prev);
		$display ("     Real value = %b", clear_request_bajar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clear_request_bajar_exp[0] = clear_request_bajar_expected_prev[0];
	end
	if (
		( clear_request_bajar_expected_prev[1] !== 1'bx ) && ( clear_request_bajar_prev[1] !== clear_request_bajar_expected_prev[1] )
		&& ((clear_request_bajar_expected_prev[1] !== last_clear_request_bajar_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request_bajar[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_bajar_expected_prev);
		$display ("     Real value = %b", clear_request_bajar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clear_request_bajar_exp[1] = clear_request_bajar_expected_prev[1];
	end
	if (
		( clear_request_bajar_expected_prev[2] !== 1'bx ) && ( clear_request_bajar_prev[2] !== clear_request_bajar_expected_prev[2] )
		&& ((clear_request_bajar_expected_prev[2] !== last_clear_request_bajar_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request_bajar[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_bajar_expected_prev);
		$display ("     Real value = %b", clear_request_bajar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clear_request_bajar_exp[2] = clear_request_bajar_expected_prev[2];
	end
	if (
		( clear_request_bajar_expected_prev[3] !== 1'bx ) && ( clear_request_bajar_prev[3] !== clear_request_bajar_expected_prev[3] )
		&& ((clear_request_bajar_expected_prev[3] !== last_clear_request_bajar_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request_bajar[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_bajar_expected_prev);
		$display ("     Real value = %b", clear_request_bajar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clear_request_bajar_exp[3] = clear_request_bajar_expected_prev[3];
	end
	if (
		( clear_request_subir_expected_prev[0] !== 1'bx ) && ( clear_request_subir_prev[0] !== clear_request_subir_expected_prev[0] )
		&& ((clear_request_subir_expected_prev[0] !== last_clear_request_subir_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request_subir[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_subir_expected_prev);
		$display ("     Real value = %b", clear_request_subir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clear_request_subir_exp[0] = clear_request_subir_expected_prev[0];
	end
	if (
		( clear_request_subir_expected_prev[1] !== 1'bx ) && ( clear_request_subir_prev[1] !== clear_request_subir_expected_prev[1] )
		&& ((clear_request_subir_expected_prev[1] !== last_clear_request_subir_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request_subir[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_subir_expected_prev);
		$display ("     Real value = %b", clear_request_subir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clear_request_subir_exp[1] = clear_request_subir_expected_prev[1];
	end
	if (
		( clear_request_subir_expected_prev[2] !== 1'bx ) && ( clear_request_subir_prev[2] !== clear_request_subir_expected_prev[2] )
		&& ((clear_request_subir_expected_prev[2] !== last_clear_request_subir_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request_subir[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_subir_expected_prev);
		$display ("     Real value = %b", clear_request_subir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clear_request_subir_exp[2] = clear_request_subir_expected_prev[2];
	end
	if (
		( clear_request_subir_expected_prev[3] !== 1'bx ) && ( clear_request_subir_prev[3] !== clear_request_subir_expected_prev[3] )
		&& ((clear_request_subir_expected_prev[3] !== last_clear_request_subir_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear_request_subir[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_request_subir_expected_prev);
		$display ("     Real value = %b", clear_request_subir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clear_request_subir_exp[3] = clear_request_subir_expected_prev[3];
	end
	if (
		( llegada_piso_expected_prev !== 1'bx ) && ( llegada_piso_prev !== llegada_piso_expected_prev )
		&& ((llegada_piso_expected_prev !== last_llegada_piso_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port llegada_piso :: @time = %t",  $realtime);
		$display ("     Expected value = %b", llegada_piso_expected_prev);
		$display ("     Real value = %b", llegada_piso_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_llegada_piso_exp = llegada_piso_expected_prev;
	end
	if (
		( motor_bajar_expected_prev !== 1'bx ) && ( motor_bajar_prev !== motor_bajar_expected_prev )
		&& ((motor_bajar_expected_prev !== last_motor_bajar_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port motor_bajar :: @time = %t",  $realtime);
		$display ("     Expected value = %b", motor_bajar_expected_prev);
		$display ("     Real value = %b", motor_bajar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_motor_bajar_exp = motor_bajar_expected_prev;
	end
	if (
		( motor_subir_expected_prev !== 1'bx ) && ( motor_subir_prev !== motor_subir_expected_prev )
		&& ((motor_subir_expected_prev !== last_motor_subir_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port motor_subir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", motor_subir_expected_prev);
		$display ("     Real value = %b", motor_subir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_motor_subir_exp = motor_subir_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ControlAscensor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_1Hz;
reg fallo_energia;
reg notificacion;
reg [2:0] piso_actual;
reg [2:0] piso_destino;
reg puerta;
reg reset;
reg sobrecarga;
// wires                                               
wire [4:0] clear_request;
wire [3:0] clear_request_bajar;
wire [3:0] clear_request_subir;
wire llegada_piso;
wire motor_bajar;
wire motor_subir;

wire sampler;                             

// assign statements (if any)                          
ControlAscensor i1 (
// port map - connection between master ports and signals/registers   
	.clear_request(clear_request),
	.clear_request_bajar(clear_request_bajar),
	.clear_request_subir(clear_request_subir),
	.clk_1Hz(clk_1Hz),
	.fallo_energia(fallo_energia),
	.llegada_piso(llegada_piso),
	.motor_bajar(motor_bajar),
	.motor_subir(motor_subir),
	.notificacion(notificacion),
	.piso_actual(piso_actual),
	.piso_destino(piso_destino),
	.puerta(puerta),
	.reset(reset),
	.sobrecarga(sobrecarga)
);

// clk_1Hz
always
begin
	clk_1Hz = 1'b0;
	clk_1Hz = #5000 1'b1;
	#5000;
end 

// fallo_energia
initial
begin
	fallo_energia = 1'b0;
end 

// notificacion
initial
begin
	notificacion = 1'b0;
end 
// piso_actual[ 2 ]
initial
begin
	piso_actual[2] = 1'b0;
	piso_actual[2] = #600000 1'b1;
end 
// piso_actual[ 1 ]
initial
begin
	piso_actual[1] = 1'b0;
	piso_actual[1] = #200000 1'b1;
	piso_actual[1] = #400000 1'b0;
end 
// piso_actual[ 0 ]
initial
begin
	piso_actual[0] = 1'b1;
	piso_actual[0] = #200000 1'b0;
	piso_actual[0] = #200000 1'b1;
	piso_actual[0] = #200000 1'b0;
	piso_actual[0] = #200000 1'b1;
end 
// piso_destino[ 2 ]
initial
begin
	piso_destino[2] = 1'b0;
end 
// piso_destino[ 1 ]
initial
begin
	piso_destino[1] = 1'b1;
end 
// piso_destino[ 0 ]
initial
begin
	piso_destino[0] = 1'b1;
	piso_destino[0] = #600000 1'b0;
end 

// puerta
initial
begin
	puerta = 1'b0;
	puerta = #590000 1'b1;
	puerta = #60000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// sobrecarga
initial
begin
	sobrecarga = 1'b0;
end 

ControlAscensor_vlg_sample_tst tb_sample (
	.clk_1Hz(clk_1Hz),
	.fallo_energia(fallo_energia),
	.notificacion(notificacion),
	.piso_actual(piso_actual),
	.piso_destino(piso_destino),
	.puerta(puerta),
	.reset(reset),
	.sobrecarga(sobrecarga),
	.sampler_tx(sampler)
);

ControlAscensor_vlg_check_tst tb_out(
	.clear_request(clear_request),
	.clear_request_bajar(clear_request_bajar),
	.clear_request_subir(clear_request_subir),
	.llegada_piso(llegada_piso),
	.motor_bajar(motor_bajar),
	.motor_subir(motor_subir),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/21/2025 07:14:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Alarmas
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Alarmas_vlg_sample_tst(
	abrir_puerta,
	cerrar_puerta,
	clk,
	fallo_energia,
	notificacion,
	reset,
	sobrecarga,
	sampler_tx
);
input  abrir_puerta;
input  cerrar_puerta;
input  clk;
input  fallo_energia;
input  notificacion;
input  reset;
input  sobrecarga;
output sampler_tx;

reg sample;
time current_time;
always @(abrir_puerta or cerrar_puerta or clk or fallo_energia or notificacion or reset or sobrecarga)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Alarmas_vlg_check_tst (
	led_fallo_en,
	led_notif,
	led_puerta_abi,
	led_puerta_cie,
	led_sobrecarga,
	sampler_rx
);
input  led_fallo_en;
input  led_notif;
input  led_puerta_abi;
input  led_puerta_cie;
input  led_sobrecarga;
input sampler_rx;

reg  led_fallo_en_expected;
reg  led_notif_expected;
reg  led_puerta_abi_expected;
reg  led_puerta_cie_expected;
reg  led_sobrecarga_expected;

reg  led_fallo_en_prev;
reg  led_notif_prev;
reg  led_puerta_abi_prev;
reg  led_puerta_cie_prev;
reg  led_sobrecarga_prev;

reg  led_fallo_en_expected_prev;
reg  led_notif_expected_prev;
reg  led_puerta_abi_expected_prev;
reg  led_puerta_cie_expected_prev;
reg  led_sobrecarga_expected_prev;

reg  last_led_fallo_en_exp;
reg  last_led_notif_exp;
reg  last_led_puerta_abi_exp;
reg  last_led_puerta_cie_exp;
reg  last_led_sobrecarga_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_fallo_en_prev = led_fallo_en;
	led_notif_prev = led_notif;
	led_puerta_abi_prev = led_puerta_abi;
	led_puerta_cie_prev = led_puerta_cie;
	led_sobrecarga_prev = led_sobrecarga;
end

// update expected /o prevs

always @(trigger)
begin
	led_fallo_en_expected_prev = led_fallo_en_expected;
	led_notif_expected_prev = led_notif_expected;
	led_puerta_abi_expected_prev = led_puerta_abi_expected;
	led_puerta_cie_expected_prev = led_puerta_cie_expected;
	led_sobrecarga_expected_prev = led_sobrecarga_expected;
end



// expected led_fallo_en
initial
begin
	led_fallo_en_expected = 1'bX;
end 

// expected led_notif
initial
begin
	led_notif_expected = 1'bX;
end 

// expected led_puerta_abi
initial
begin
	led_puerta_abi_expected = 1'bX;
end 

// expected led_puerta_cie
initial
begin
	led_puerta_cie_expected = 1'bX;
end 

// expected led_sobrecarga
initial
begin
	led_sobrecarga_expected = 1'bX;
end 
// generate trigger
always @(led_fallo_en_expected or led_fallo_en or led_notif_expected or led_notif or led_puerta_abi_expected or led_puerta_abi or led_puerta_cie_expected or led_puerta_cie or led_sobrecarga_expected or led_sobrecarga)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led_fallo_en = %b | expected led_notif = %b | expected led_puerta_abi = %b | expected led_puerta_cie = %b | expected led_sobrecarga = %b | ",led_fallo_en_expected_prev,led_notif_expected_prev,led_puerta_abi_expected_prev,led_puerta_cie_expected_prev,led_sobrecarga_expected_prev);
	$display("| real led_fallo_en = %b | real led_notif = %b | real led_puerta_abi = %b | real led_puerta_cie = %b | real led_sobrecarga = %b | ",led_fallo_en_prev,led_notif_prev,led_puerta_abi_prev,led_puerta_cie_prev,led_sobrecarga_prev);
`endif
	if (
		( led_fallo_en_expected_prev !== 1'bx ) && ( led_fallo_en_prev !== led_fallo_en_expected_prev )
		&& ((led_fallo_en_expected_prev !== last_led_fallo_en_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_fallo_en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_fallo_en_expected_prev);
		$display ("     Real value = %b", led_fallo_en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_fallo_en_exp = led_fallo_en_expected_prev;
	end
	if (
		( led_notif_expected_prev !== 1'bx ) && ( led_notif_prev !== led_notif_expected_prev )
		&& ((led_notif_expected_prev !== last_led_notif_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_notif :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_notif_expected_prev);
		$display ("     Real value = %b", led_notif_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_notif_exp = led_notif_expected_prev;
	end
	if (
		( led_puerta_abi_expected_prev !== 1'bx ) && ( led_puerta_abi_prev !== led_puerta_abi_expected_prev )
		&& ((led_puerta_abi_expected_prev !== last_led_puerta_abi_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_puerta_abi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_puerta_abi_expected_prev);
		$display ("     Real value = %b", led_puerta_abi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_puerta_abi_exp = led_puerta_abi_expected_prev;
	end
	if (
		( led_puerta_cie_expected_prev !== 1'bx ) && ( led_puerta_cie_prev !== led_puerta_cie_expected_prev )
		&& ((led_puerta_cie_expected_prev !== last_led_puerta_cie_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_puerta_cie :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_puerta_cie_expected_prev);
		$display ("     Real value = %b", led_puerta_cie_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_puerta_cie_exp = led_puerta_cie_expected_prev;
	end
	if (
		( led_sobrecarga_expected_prev !== 1'bx ) && ( led_sobrecarga_prev !== led_sobrecarga_expected_prev )
		&& ((led_sobrecarga_expected_prev !== last_led_sobrecarga_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_sobrecarga :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_sobrecarga_expected_prev);
		$display ("     Real value = %b", led_sobrecarga_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_sobrecarga_exp = led_sobrecarga_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Alarmas_vlg_vec_tst();
// constants                                           
// general purpose registers
reg abrir_puerta;
reg cerrar_puerta;
reg clk;
reg fallo_energia;
reg notificacion;
reg reset;
reg sobrecarga;
// wires                                               
wire led_fallo_en;
wire led_notif;
wire led_puerta_abi;
wire led_puerta_cie;
wire led_sobrecarga;

wire sampler;                             

// assign statements (if any)                          
Alarmas i1 (
// port map - connection between master ports and signals/registers   
	.abrir_puerta(abrir_puerta),
	.cerrar_puerta(cerrar_puerta),
	.clk(clk),
	.fallo_energia(fallo_energia),
	.led_fallo_en(led_fallo_en),
	.led_notif(led_notif),
	.led_puerta_abi(led_puerta_abi),
	.led_puerta_cie(led_puerta_cie),
	.led_sobrecarga(led_sobrecarga),
	.notificacion(notificacion),
	.reset(reset),
	.sobrecarga(sobrecarga)
);

// abrir_puerta
initial
begin
	abrir_puerta = 1'b1;
	abrir_puerta = #70000 1'b0;
end 

// cerrar_puerta
initial
begin
	cerrar_puerta = 1'b0;
	cerrar_puerta = #100000 1'b1;
	cerrar_puerta = #100000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// fallo_energia
initial
begin
	fallo_energia = 1'b0;
	fallo_energia = #220000 1'b1;
	fallo_energia = #100000 1'b0;
end 

// notificacion
initial
begin
	notificacion = 1'b0;
	notificacion = #350000 1'b1;
	notificacion = #80000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// sobrecarga
initial
begin
	sobrecarga = 1'b0;
	sobrecarga = #470000 1'b1;
	sobrecarga = #60000 1'b0;
end 

Alarmas_vlg_sample_tst tb_sample (
	.abrir_puerta(abrir_puerta),
	.cerrar_puerta(cerrar_puerta),
	.clk(clk),
	.fallo_energia(fallo_energia),
	.notificacion(notificacion),
	.reset(reset),
	.sobrecarga(sobrecarga),
	.sampler_tx(sampler)
);

Alarmas_vlg_check_tst tb_out(
	.led_fallo_en(led_fallo_en),
	.led_notif(led_notif),
	.led_puerta_abi(led_puerta_abi),
	.led_puerta_cie(led_puerta_cie),
	.led_sobrecarga(led_sobrecarga),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/22/2025 11:31:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    identificador_direccion
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module identificador_direccion_vlg_sample_tst(
	clk_1Hz,
	motor_bajar,
	motor_subir,
	reset,
	solicitudes_bajar,
	solicitudes_cabina,
	solicitudes_subir,
	sampler_tx
);
input  clk_1Hz;
input  motor_bajar;
input  motor_subir;
input  reset;
input [3:0] solicitudes_bajar;
input [4:0] solicitudes_cabina;
input [3:0] solicitudes_subir;
output sampler_tx;

reg sample;
time current_time;
always @(clk_1Hz or motor_bajar or motor_subir or reset or solicitudes_bajar or solicitudes_cabina or solicitudes_subir)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module identificador_direccion_vlg_check_tst (
	piso_destino,
	sampler_rx
);
input [2:0] piso_destino;
input sampler_rx;

reg [2:0] piso_destino_expected;

reg [2:0] piso_destino_prev;

reg [2:0] piso_destino_expected_prev;

reg [2:0] last_piso_destino_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	piso_destino_prev = piso_destino;
end

// update expected /o prevs

always @(trigger)
begin
	piso_destino_expected_prev = piso_destino_expected;
end


// expected piso_destino[ 2 ]
initial
begin
	piso_destino_expected[2] = 1'bX;
end 
// expected piso_destino[ 1 ]
initial
begin
	piso_destino_expected[1] = 1'bX;
end 
// expected piso_destino[ 0 ]
initial
begin
	piso_destino_expected[0] = 1'bX;
end 
// generate trigger
always @(piso_destino_expected or piso_destino)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected piso_destino = %b | ",piso_destino_expected_prev);
	$display("| real piso_destino = %b | ",piso_destino_prev);
`endif
	if (
		( piso_destino_expected_prev[0] !== 1'bx ) && ( piso_destino_prev[0] !== piso_destino_expected_prev[0] )
		&& ((piso_destino_expected_prev[0] !== last_piso_destino_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port piso_destino[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", piso_destino_expected_prev);
		$display ("     Real value = %b", piso_destino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_piso_destino_exp[0] = piso_destino_expected_prev[0];
	end
	if (
		( piso_destino_expected_prev[1] !== 1'bx ) && ( piso_destino_prev[1] !== piso_destino_expected_prev[1] )
		&& ((piso_destino_expected_prev[1] !== last_piso_destino_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port piso_destino[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", piso_destino_expected_prev);
		$display ("     Real value = %b", piso_destino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_piso_destino_exp[1] = piso_destino_expected_prev[1];
	end
	if (
		( piso_destino_expected_prev[2] !== 1'bx ) && ( piso_destino_prev[2] !== piso_destino_expected_prev[2] )
		&& ((piso_destino_expected_prev[2] !== last_piso_destino_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port piso_destino[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", piso_destino_expected_prev);
		$display ("     Real value = %b", piso_destino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_piso_destino_exp[2] = piso_destino_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module identificador_direccion_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_1Hz;
reg motor_bajar;
reg motor_subir;
reg reset;
reg [3:0] solicitudes_bajar;
reg [4:0] solicitudes_cabina;
reg [3:0] solicitudes_subir;
// wires                                               
wire [2:0] piso_destino;

wire sampler;                             

// assign statements (if any)                          
identificador_direccion i1 (
// port map - connection between master ports and signals/registers   
	.clk_1Hz(clk_1Hz),
	.motor_bajar(motor_bajar),
	.motor_subir(motor_subir),
	.piso_destino(piso_destino),
	.reset(reset),
	.solicitudes_bajar(solicitudes_bajar),
	.solicitudes_cabina(solicitudes_cabina),
	.solicitudes_subir(solicitudes_subir)
);

// clk_1Hz
always
begin
	clk_1Hz = 1'b0;
	clk_1Hz = #5000 1'b1;
	#5000;
end 

// motor_bajar
initial
begin
	motor_bajar = 1'b0;
end 

// motor_subir
initial
begin
	motor_subir = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// solicitudes_bajar[ 3 ]
initial
begin
	solicitudes_bajar[3] = 1'b0;
end 
// solicitudes_bajar[ 2 ]
initial
begin
	solicitudes_bajar[2] = 1'b0;
end 
// solicitudes_bajar[ 1 ]
initial
begin
	solicitudes_bajar[1] = 1'b0;
end 
// solicitudes_bajar[ 0 ]
initial
begin
	solicitudes_bajar[0] = 1'b0;
end 
// solicitudes_cabina[ 4 ]
initial
begin
	solicitudes_cabina[4] = 1'b0;
end 
// solicitudes_cabina[ 3 ]
initial
begin
	solicitudes_cabina[3] = 1'b0;
end 
// solicitudes_cabina[ 2 ]
initial
begin
	solicitudes_cabina[2] = 1'b1;
end 
// solicitudes_cabina[ 1 ]
initial
begin
	solicitudes_cabina[1] = 1'b0;
end 
// solicitudes_cabina[ 0 ]
initial
begin
	solicitudes_cabina[0] = 1'b0;
end 
// solicitudes_subir[ 3 ]
initial
begin
	solicitudes_subir[3] = 1'b0;
end 
// solicitudes_subir[ 2 ]
initial
begin
	solicitudes_subir[2] = 1'b0;
end 
// solicitudes_subir[ 1 ]
initial
begin
	solicitudes_subir[1] = 1'b0;
end 
// solicitudes_subir[ 0 ]
initial
begin
	solicitudes_subir[0] = 1'b0;
end 

identificador_direccion_vlg_sample_tst tb_sample (
	.clk_1Hz(clk_1Hz),
	.motor_bajar(motor_bajar),
	.motor_subir(motor_subir),
	.reset(reset),
	.solicitudes_bajar(solicitudes_bajar),
	.solicitudes_cabina(solicitudes_cabina),
	.solicitudes_subir(solicitudes_subir),
	.sampler_tx(sampler)
);

identificador_direccion_vlg_check_tst tb_out(
	.piso_destino(piso_destino),
	.sampler_rx(sampler)
);
endmodule

